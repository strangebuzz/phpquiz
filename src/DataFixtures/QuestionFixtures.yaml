questions:
    1:
        person: Fred
        difficulty: 3
        label: Namespaces and extended classes
        description: |
            What will be displayed?

            ```php
            <?php

            namespace \Foo \Bar;

            class A {
                static public function show() {
                    echo static::class;
                }
            }

            class B extends A {}

            B::show();
            ?>
            ```

        answers:
            - label: >
                  Fatal error: Uncaught Error: Undefined constant 'Foo\Bar'
              score: 1.0
            - label: >
                  Parse error: syntax error, unexpected '\' (T_NS_SEPARATOR)'
              score: 0.0
            - label: Foo\Bar\A
              score: 0.0
            - label: Foo\Bar\B
              score: 0.0

        answer_explanations: >
            PHP namespaces can contain space characters, but they can\'t begin with a backslash.
            Try here: [https://3v4l.org/pQOMe]

            > Notice: As I am writing this quiz (2020-07-31), there is a slight difference between all versions and PHP 8.0.0alpha3:
            > With this last version, the exception message "Foo\Bar" is wrapped by double quotes instead of single quotes for other versions (\'Foo\Bar\'). ðŸ¤”

            Read the namespaces documentation on php.net: [Defining namespaces](https://www.php.net/manual/en/language.namespaces.definition.php)

        sourceUrl: https://twitter.com/FredBouchery/status/1286207302018699264
        created_at: '2020-07-23'

    2:
        person: Fred
        difficulty: 3
        label: Generator
        description: |
            What will be displayed (PHP version >= 7.4)?

            ```php
            <?php

            function generator() {
                yield '1' => 4;
                yield '0' => 2;
            }

            $array = [... generator()];

            echo implode('', $array);
            ```

        answers:
            - label: '42'
              score: 0.0
            - label: '24'
              score: 0.0
            - label: "Parse error: syntax error, unexpected '...' (T_ELLIPSIS)"
              score: 0.0
            - label: 'Fatal error: Uncaught Error: Cannot unpack Traversable with string keys'
              score: 1.0

        answer_explanations: |
            PHP 7.4 unpack a Traversable by keeping the iteration order, but it fails when the keys are strings, even if those strings are numeric.

            The right answer was "Fatal error: Uncaught Error: Cannot unpack Traversable with string keys".

            Try here: [https://3v4l.org/qKGPt]

            Read the generators documentation on php.net: [Generator syntax](https://www.php.net/manual/en/language.generators.syntax.php)

        sourceUrl: https://twitter.com/FredBouchery/status/1285134865176956929
        created_at: '2020-07-20'

    3:
        person: Fred
        difficulty: 3
        label: property_exists ?
        description: |
            What will be displayed (PHP version >= 7.4)?

            ```php
            <?php
            declare(strict_types=0);
            class A {
                public function get(string $name, $default) {
                    if (property_exists($this, $name)) {
                        return $this->{$name};
                    }

                    return $default;
                }
            }

            class B extends A {
                private $foo = 42;
            }

            var_dump((new B)->get('foo', null));

            ```


        answers:
            - label: 'int(42)'
              score: 0.0
            - label: 'NULL'
              score: 0.0
            - label: 'Fatal error: Uncaught Error: Cannot access private property B::\$foo'
              score: 1.0
            - label: "Parse error: syntax error, unexpected '{'"
              score: 0.0

        answer_explanations: |
            PHP function `property_exists` will find the private property, but you cannot access to it.

            The right answer was "`Fatal error: Uncaught Error: Cannot access private property B::\$foo`"

            Try here: [ https://3v4l.org/1Qe3c ]

            Read the property_exists documentation on php.net: [ property_exists ](https://www.php.net/manual/en/function.property-exists.php)

        sourceUrl: https://twitter.com/FredBouchery/status/1283314819228225537
        created_at: '2020-07-15'

    4:
        person: Fred
        difficulty: 3
        label: label
        description: |
            What will be displayed ?

            ```php
            <?php
            declare(strict_types=1);

            $generator = (function() {
                yield 42;
            });

            array_walk($generator, function (int $value) {
                var_dump($value);
            });

             ```

        answers:
            - label: '[nothing]'
              score: 1.0
            - label: 'int(42)'
              score: 0.0
            - label: 'string(2) "42"'
              score: 0.0
            - label: 'Fatal Error (type error)'
              score: 0.0

        answer_explanations: |
            All PHP functions prefixed by "array_" expect an array, and not a traversable/iterator.

            The result is "[nothing]". Try here: [ https://3v4l.org/kKt77 ]

            > Note: If the values had been in an array it would have been "int(42)" because internal array functions do not follow strict typing.

            Read the array functions documentation on php.net: [ Array Functions ](https://www.php.net/manual/en/ref.array.php)

        sourceUrl: https://twitter.com/FredBouchery/status/1295648502370926593
        created_at: '2020-08-18'

    5:
        person: Fred
        difficulty: 3
        label: label
        description: |
            What will be displayed ?

            ```php
            <?php

            $array = [];
            foreach (['a', '42'] as $key) {
                $array[$key] = $key;
            }

            $merge = array_merge($array, []);
            echo $merge[0] ?? 'null';
             ```

        answers:
            - label: 'null'
              score: 0.0
            - label: 'a'
              score: 0.0
            - label: '42'
              score: 1.0
            - label: '[nothing]'
              score: 0.0

        answer_explanations: |
            When you use the PHP function <code>array_merge</code>, all values in the input arrays with numeric keys will be renumbered with incrementing keys starting from zero.

            The right answer was "42" (C).

            Try here: [ https://3v4l.org/lb1YD ]

            Read the array_merge function documentation on php.net: [array_merge](https://www.php.net/manual/en/function.array-merge.php)

        sourceUrl: https://twitter.com/FredBouchery/status/1297796014338973697
        created_at: '2020-08-24'
#
#    5:
#        id: 5
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed?
#        answer_explanations: >
#            When you use the PHP function <code>array_merge</code>, all values in the input arrays with numeric keys will be renumbered
#            with incrementing keys starting from zero. The right answer was "42" (C).
#        live_snippet_url: https://3v4l.org/lb1YD
#        sourceUrl: https://twitter.com/FredBouchery/status/1297796014338973697
#        differences_output_notes: null
#        created_at: '2020-08-24'

        #    3:
        #        person: Fred
        #        difficulty: 3
        #        label: label
        #        description: |
        #            What will be displayed ?
        #
        #            ```php
        #             ```
        #
        #        answers:
        #            - label: ''
        #              score: 1.0
        #            - label: ''
        #              score: 0.0
        #            - label: ''
        #              score: 0.0
        #            - label: ''
        #              score: 0.0
        #
        #        answer_explanations: |
        #            explaination

        #            Try here: [ https://3v4l.org/xxxx ]
        #
        #            Read the generators documentation on php.net: [ Generator syntax ](https://www.php.net/manual/en/language.generators.syntax.php)
        #
        #        sourceUrl: https://twitter.com/FredBouchery/status/xxxxx
        #        created_at: '2020-07-23'

#
#    6:
#        id: 6
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed?
#        answer_explanations: >
#            The PHP class name resolution using ::class is a compile time transformation.
#            As a consequence, class names are expanded even if the class does not exist. No error is issued in that case.
#            The right answer was "A".
#        live_snippet_url: https://3v4l.org/FVUEu
#        sourceUrl: https://twitter.com/FredBouchery/status/1298887883244396544
#        differences_output_notes: null
#        created_at: '2020-08-27'
#        
#    7:
#        id: 7
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed?
#        answer_explanations: >
#            You can use the same name for a class, a method, a function and a constant. In addition, functions and classes are case-insensitive.
#            The right answer was "BAR" (C). "BARBAR" happens for versions prior to PHP 8 when there is no namespace.
#        live_snippet_url: https://3v4l.org/6NXXh
#        sourceUrl: https://twitter.com/FredBouchery/status/1300355047440683010
#        differences_output_notes: null
#        created_at: '2020-08-31'
#        
#    8:
#        id: 8
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed in current supported PHP version? (<8)
#        answer_explanations: >
#            An abstract method cannot be private and this will raise a fatal error during compile time. The right answer was "B".
#            This will change with PHP 8 which will be able to declare a abstract private method in a trait (answer "A")
#        live_snippet_url: https://3v4l.org/9pubJ
#        sourceUrl: https://twitter.com/FredBouchery/status/1302865230653988865
#        differences_output_notes: >
#            An abstract method can be private with PHP 8, the correct answer in this case is "A" (int 42).
#        created_at: '2020-09-07'
#        
#    9:
#        id: 9
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed in current supported PHP version? (<8)
#        answer_explanations: >
#            A numeric value can be prefixed by blank characters, but not after. The right answer was "C".
#            This will change with PHP 8 which will accept blank characters after.
#        live_snippet_url: https://3v4l.org/WEi6L
#        sourceUrl: https://twitter.com/FredBouchery/status/1304314751628070912
#        differences_output_notes: With PHP 8 the right answer is "D".
#        created_at: '2020-09-11'
#        
#    10:
#        id: 10
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed in current supported PHP version? (<=8)
#        answer_explanations: >
#            PHP magic methods must be declared with the exact number of parameters.
#            It is not necessary to specify type, but if you do, the first one must be a string and the second an array.
#            The right answer was "C".
#        live_snippet_url: https://3v4l.org/9WApp
#        sourceUrl: https://twitter.com/FredBouchery/status/1305768968398024704
#        differences_output_notes: null
#        created_at: '2020-09-15'
#        
#    11:
#        id: 11
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed in PHP 8?
#        answer_explanations: PHP object is callable only if the method __invoke is implemented.
#        live_snippet_url: https://3v4l.org/YiIUv
#        sourceUrl: https://twitter.com/FredBouchery/status/1306878803755630593
#        differences_output_notes: >
#            For PHP 7, the right answer is "C" (there was an error the original Twitter poll).
#        created_at: '2020-09-18'
#        
#    12:
#        id: 12
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed in PHP 8?
#        answer_explanations: >
#            PHP magic setters do not follow strict_types and you can set a property which does not exist.
#            PHP 8 will not change this behavior. The right answer was "A".
#        live_snippet_url: https://3v4l.org/lWGYU
#        sourceUrl: https://twitter.com/FredBouchery/status/1308313561744265217
#        differences_output_notes: null
#        created_at: '2020-09-22'
#        
#    13:
#        id: 13
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed with PHP 8.0?
#        answer_explanations: >
#            PHP 8 can now return "static". Prior to this version it returned a fatal error "unexpected static".
#            In addition, you can use "::class" in a dynamic context (that was not allowed before). The right answer was "A".
#        live_snippet_url: https://3v4l.org/X0tgt
#        sourceUrl: https://twitter.com/FredBouchery/status/1310475146684256256
#        differences_output_notes: >
#            Prior to this version you get the following error: 'PHP Parse error:  syntax error, unexpected 'static' (T_STATIC) on line 5'
#        created_at: '2020-09-28'
#        
#    14:
#        id: 14
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed with PHP 8.0?
#        answer_explanations: >
#            PHP variables in double-quoted strings are parse differently if they are between braces or not.
#            Outside braces, PHP can access to properties but don't call methods.
#            The right answer was '() / bar' because property 'bar' doesn't exists.
#        live_snippet_url: https://3v4l.org/VALlY
#        sourceUrl: https://twitter.com/FredBouchery/status/1313017003842637824
#        differences_output_notes: null
#        created_at: '2020-10-05'
#        
#    15:
#        id: 15
#        person_id: 1
#        difficulty: 3
#        label: What will be displayed? (PHP => 7.4)
#        answer_explanations: >
#            When using a PHP closure (or a short closure) with "$this", the closure must be declare inside a class method. The result was "C".
#        live_snippet_url: https://3v4l.org/1kgRa
#        sourceUrl: https://twitter.com/FredBouchery/status/1314100784838119424
#        differences_output_notes: >
#            For PHP 7.3 and below we have the following error: Parse error: syntax error, unexpected 'string' (T_STRING),
#            expecting function (T_FUNCTION) or const (T_CONST).",
#        created_at: '2020-10-08'
#        
#    16:
#        id: 16
#        person_id: 1
#        difficulty: 3
#        label: >
#            WTF PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            Yes, PHP 8 always has alternative syntax for control structures, and you can mix them. "goto" was introduced in PHP 5.3
#            and it still exists in version 8. This is not a good practice, please do not use it. This quiz is a joke! The right answer was "fooend" (B).
#        live_snippet_url: https://3v4l.org/UMPHi
#        sourceUrl: https://twitter.com/FredBouchery/status/1315579400377839616
#        differences_output_notes: It also works with previous PHP versions!
#        created_at: '2020-10-12'
#        
#    17:
#        id: 17
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8: What will be displayed?
#        answer_explanations: >
#            Default value of unset variable is "NULL".  Then type must be nullable even when it s a reference.
#            The right answer was a fatal TypeError.
#        live_snippet_url: https://3v4l.org/rptQ6
#        sourceUrl: https://twitter.com/FredBouchery/status/1316639108471627776
#        differences_output_notes: null
#        created_at: '2020-10-15'
#        
#    18:
#        id: 18
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8: What will be displayed?
#        answer_explanations: >
#            PHP numeric literal separator are only available during script parsing, and since PHP 8 (> alpha) non well formed numeric
#            value raise a warning which become TypeError, Right answer was C: "[10]TypeError".
#        live_snippet_url: https://3v4l.org/DduJJ
#        sourceUrl: https://twitter.com/FredBouchery/status/1318101855793258497
#        differences_output_notes: >
#            Since PHP 8 (> alpha) non well formed numeric value raise a warning which become TypeError.
#        created_at: '2020-10-19'
#        
#    19:
#        id: 19
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            PHP "use" and "::class" are done at compile time and not runtime (except for "static"),
#            then you can use it with undefined classes. It's just a name resolution. The right answer was "A"
#        live_snippet_url: https://3v4l.org/2ZalV
#        sourceUrl: https://twitter.com/FredBouchery/status/1319555743675273216
#        differences_output_notes: null
#        created_at: '2020-10-23'
#        
#    20:
#        id: 20
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            PHP import variables when a short closure is declared. Changing variable content after, will not change imported value.
#            Prior to version 8, it raised a notice, now it's a warning. The right answer was "C".
#        live_snippet_url: https://3v4l.org/8OMil
#        sourceUrl: https://twitter.com/FredBouchery/status/1320671506985353216
#        differences_output_notes: null
#        created_at: '2020-10-26'
#        
#    21:
#        id: 21
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            PHP variables are freed when function ends, and if an object is not affected, it is freed immediately.
#            The right answer was "1D23D".
#        live_snippet_url: https://3v4l.org/FCEBg
#        sourceUrl: https://twitter.com/FredBouchery/status/1321764081364324352
#        differences_output_notes: null
#        created_at: '2020-10-29'
#        
#    22:
#        id: 22
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            PHP class properties can be accessed dynamically and its name can contains spaces, quotes, etc.
#            Magic setter don't follow strict_types. The right answer was "Foo&voilÃ ".
#        live_snippet_url: https://3v4l.org/4gqbq
#        sourceUrl: https://twitter.com/FredBouchery/status/1323180921793712130
#        differences_output_notes: null
#        created_at: '2020-11-02'
#        
#    23:
#        id: 23
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            PHP references on properties allow you to make a variable refer to the property's content.
#            If the property is type hinted, the type will be checked. The right answer was "TypeError".
#        live_snippet_url: https://3v4l.org/7ORDk
#        sourceUrl: https://twitter.com/FredBouchery/status/1324622328052023296
#        differences_output_notes: >
#            For PHP 7.3 and below the error is "Parse error: syntax error, unexpected 'int' (T_STRING), expecting function (T_FUNCTION) or const (T_CONST)"
#        created_at: '2020-11-06'
#        
#    24:
#        id: 24
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            #PHP namespaces, classes and functions/methods are not case sensitive, but properties and constants are.
#            Since PHP 8, it is not possible to declare a case insensitive constant.
#        live_snippet_url: https://3v4l.org/gMUTO
#        sourceUrl: https://twitter.com/FredBouchery/status/1325735317912121348
#        differences_output_notes: null
#        created_at: '2020-11-09'
#        
#    25:
#        id: 25
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            PHP 8 has changed the concat's precedence. Prior to PHP 8,  "3 . 7 + 5" gives the resultat "int(42)" but now,
#            it's string "312" The right answer was "TypeError".
#        live_snippet_url: https://3v4l.org/2Wnsf
#        sourceUrl: https://twitter.com/FredBouchery/status/1326802169966817280
#        differences_output_notes: >
#            Prior to PHP 8, "3 . 7 + 5" gives the resultat "int(42)" and PHP 7.4
#            displays a deprecated even with error_reporting(0).
#        created_at: '2020-11-12'
#        
#    26:
#        id: 26
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            When iterate through a PHP object, all visible properties will be used.
#            An uninitialized typed  property is not considered visible.
#        live_snippet_url: https://3v4l.org/qPdvt
#        sourceUrl: https://twitter.com/FredBouchery/status/1328267933982871552
#        differences_output_notes: null
#        created_at: '2020-11-16'
#        
#    27:
#        id: 27
#        person_id: 1
#        difficulty: 3
#        label: >
#            PHP 8 quiz: What will be displayed?
#        answer_explanations: >
#            It is possible that two implemented interfaces use the same name, but the signatures must be identical.
#            Since PHP 8, contravariance allows to widen the parameter type, so this code is allowed.
#        live_snippet_url: https://3v4l.org/nQ1Yo
#        sourceUrl: https://twitter.com/FredBouchery/status/1329333201597313025
#        differences_output_notes: null
#        created_at: '2020-11-19'
        